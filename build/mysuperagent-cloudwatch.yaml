AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudWatch Monitoring for MySuperAgent Infrastructure"

Parameters:
  MainStackName:
    Type: String
    Description: "Name of the main CloudFormation stack to import values from"
    Default: "MySuperAgent-Infrastructure"

  AlarmEmailSubscription:
    Type: String
    Description: "Email address to notify when alarms are triggered"
    Default: "youremail@example.com"

  DiskSpaceThreshold:
    Type: Number
    Description: "Threshold percentage for disk space alarm"
    Default: 85

  CPUUtilizationThreshold:
    Type: Number
    Description: "Threshold percentage for CPU utilization alarm"
    Default: 80

  MemoryUtilizationThreshold:
    Type: Number
    Description: "Threshold percentage for memory utilization alarm"
    Default: 80

Resources:
  # SNS Topic for Alarm Notifications
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "MySuperAgent-Alarms"
      TopicName: "MySuperAgent-Alarms"

  # SNS Subscription for Email Notifications
  AlarmSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Protocol: "email"
      Endpoint: !Ref AlarmEmailSubscription

  # CloudWatch Agent SSM Parameter (Configuration)
  CloudWatchAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/mysuperagent/cloudwatch-agent/config"
      Type: String
      Value: !Sub |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "metrics": {
            "namespace": "MySuperAgent",
            "append_dimensions": {
              "InstanceId": "${!aws:InstanceId}"
            },
            "metrics_collected": {
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent",
                  "inodes_used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "/"
                ]
              },
              "diskio": {
                "measurement": [
                  "io_time",
                  "write_bytes",
                  "read_bytes",
                  "writes",
                  "reads"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent",
                  "mem_available_percent"
                ],
                "metrics_collection_interval": 60
              },
              "netstat": {
                "measurement": [
                  "tcp_established",
                  "tcp_time_wait"
                ],
                "metrics_collection_interval": 60
              },
              "swap": {
                "measurement": [
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "processes": {
                "measurement": [
                  "running",
                  "blocked",
                  "zombies"
                ],
                "metrics_collection_interval": 60
              }
            }
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "/mysuperagent/system/messages",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/secure",
                    "log_group_name": "/mysuperagent/system/secure",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/cloud-init.log",
                    "log_group_name": "/mysuperagent/system/cloud-init",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/cloud-init-output.log",
                    "log_group_name": "/mysuperagent/system/cloud-init-output",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/docker/*",
                    "log_group_name": "/mysuperagent/docker/daemon",
                    "log_stream_name": "{instance_id}-{file_basename}"
                  }
                ]
              }
            },
            "log_stream_name": "{instance_id}"
          }
        }

  # Activate CloudWatch Agent via SSM Run Command
  ActivateCloudWatchAgent:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-RunShellScript
      Parameters:
        commands:
          - |
            # Configure CloudWatch Agent from SSM Parameter
            amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:/mysuperagent/cloudwatch-agent/config

            # Ensure CloudWatch Agent starts on boot
            systemctl enable amazon-cloudwatch-agent

            # Start CloudWatch Agent
            systemctl start amazon-cloudwatch-agent
      Targets:
        - Key: InstanceIds
          Values:
            - !ImportValue
              Fn::Sub: "${MainStackName}-InstanceId"

  # Log Groups for Application Containers
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/app/backend"
      RetentionInDays: 30

  SystemMessagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/system/messages"
      RetentionInDays: 30

  SystemSecureLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/system/secure"
      RetentionInDays: 30

  CloudInitLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/system/cloud-init"
      RetentionInDays: 30

  CloudInitOutputLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/system/cloud-init-output"
      RetentionInDays: 30

  DockerDaemonLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/mysuperagent/docker/daemon"
      RetentionInDays: 30

  # CPU Utilization Alarm
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when CPU exceeds threshold"
      AlarmName: "MySuperAgent-CPUAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: !Ref CPUUtilizationThreshold
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: InstanceId
          Value: !ImportValue
            Fn::Sub: "${MainStackName}-InstanceId"

  # Memory Utilization Alarm (Using CloudWatch Agent)
  MemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when Memory exceeds threshold"
      AlarmName: "MySuperAgent-MemoryAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: mem_used_percent
      Namespace: MySuperAgent
      Period: 300
      Statistic: Average
      Threshold: !Ref MemoryUtilizationThreshold
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: InstanceId
          Value: !ImportValue
            Fn::Sub: "${MainStackName}-InstanceId"

  # Disk Space Alarm (Using CloudWatch Agent)
  DiskSpaceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when disk space exceeds threshold"
      AlarmName: "MySuperAgent-DiskSpaceAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: used_percent
      Namespace: MySuperAgent
      Period: 300
      Statistic: Average
      Threshold: !Ref DiskSpaceThreshold
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: InstanceId
          Value: !ImportValue
            Fn::Sub: "${MainStackName}-InstanceId"
        - Name: path
          Value: "/"
        - Name: fstype
          Value: "xfs"

  # ALB 5XX Error Rate Alarm
  ALB5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when ALB 5XX errors exceed threshold"
      AlarmName: "MySuperAgent-ALB5XXErrorAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 300
      Statistic: Sum
      Threshold: 5
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: LoadBalancer
          Value: !ImportValue
            Fn::Sub: "${MainStackName}-LoadBalancerName"

  # ALB Target Response Time Alarm
  ALBLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when ALB latency exceeds threshold"
      AlarmName: "MySuperAgent-ALBLatencyAlarm"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 300
      Statistic: Average
      Threshold: 1 # 1 second
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: LoadBalancer
          Value: !ImportValue
            Fn::Sub: "${MainStackName}-LoadBalancerName"

  # CloudWatch Dashboard for visualization
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: MySuperAgent-Dashboard
      DashboardBody:
        Fn::Sub:
          - |
            {
              "widgets": [
                {
                  "type": "metric",
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [
                      [ "AWS/EC2", "CPUUtilization", "InstanceId", "${InstanceId}" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "title": "EC2 CPU Utilization",
                    "period": 300
                  }
                },
                {
                  "type": "metric",
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [
                      [ "MySuperAgent", "mem_used_percent", "InstanceId", "${InstanceId}" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "title": "Memory Utilization",
                    "period": 300
                  }
                },
                {
                  "type": "metric",
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [
                      [ "MySuperAgent", "used_percent", "InstanceId", "${InstanceId}", "path", "/", "fstype", "xfs" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "title": "Disk Usage",
                    "period": 300
                  }
                },
                {
                  "type": "metric",
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [
                      [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${LoadBalancerName}" ],
                      [ ".", "HTTPCode_Target_2XX_Count", ".", "." ],
                      [ ".", "HTTPCode_Target_4XX_Count", ".", "." ],
                      [ ".", "HTTPCode_Target_5XX_Count", ".", "." ],
                      [ ".", "HTTPCode_ELB_5XX_Count", ".", "." ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "title": "ALB Request Metrics",
                    "period": 300
                  }
                },
                {
                  "type": "metric",
                  "width": 12,
                  "height": 6,
                  "properties": {
                    "metrics": [
                      [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${LoadBalancerName}" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "title": "ALB Latency",
                    "period": 300
                  }
                },
                {
                  "type": "log",
                  "width": 24,
                  "height": 6,
                  "properties": {
                    "query": "SOURCE '/mysuperagent/app/backend' | fields @timestamp, @message\n| sort @timestamp desc\n| limit 20",
                    "region": "${AWS::Region}",
                    "title": "Latest Backend Logs",
                    "view": "table"
                  }
                }
              ]
            }
          - InstanceId: !ImportValue
              Fn::Sub: "${MainStackName}-InstanceId"
            LoadBalancerName: !ImportValue
              Fn::Sub: "${MainStackName}-LoadBalancerName"

Outputs:
  AlertTopic:
    Description: "SNS Topic ARN for CloudWatch Alarms"
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlarmTopic"

  CloudWatchAgentConfigSSM:
    Description: "SSM Parameter for CloudWatch Agent configuration"
    Value: !Ref CloudWatchAgentConfig
    Export:
      Name: !Sub "${AWS::StackName}-AgentConfig"

  DashboardURL:
    Description: "URL to the CloudWatch Dashboard"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${MonitoringDashboard}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardURL"

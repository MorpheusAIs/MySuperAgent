AWSTemplateFormatVersion: "2010-09-09"
Description: "MySuperAgent Infrastructure with CodeDeploy Integration"

Resources:
  # Security Group for EC2
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH, HTTP, and backend services"
      VpcId: vpc-0b3d3e43a3896fba1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: vpc-0b3d3e43a3896fba1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # --- CodeDeploy Resources ---

  # S3 Bucket for Deployment Artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "mysuperagent-deploy-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # IAM Role for CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: MySuperAgentApp
      ComputePlatform: Server

  # CodeDeploy Deployment Group
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentGroupName: MySuperAgentDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: MySuperAgent
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeImages
                Resource: "*"
        - PolicyName: CodeDeployS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/*"
                  - "arn:aws:s3:::aws-codedeploy-us-west-1/*"
        # Add this new policy for Secrets Manager access
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
      Path: "/"

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.small
      KeyName: MySuperAgentKey
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-06114d52c0976a495
      Tags:
        - Key: Name
          Value: MySuperAgent
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref InstanceSecurityGroup
          SubnetId: subnet-0a4ab4cec37708368
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker jq aws-cli ruby wget bind-utils

          # Configure system DNS settings for reliability
          echo "options timeout:2 attempts:5 rotate" >> /etc/resolv.conf
          echo "nameserver 8.8.8.8" >> /etc/resolv.conf
          echo "nameserver 8.8.4.4" >> /etc/resolv.conf

          # Install CodeDeploy Agent
          cd /home/ec2-user
          wget https://aws-codedeploy-us-west-1.s3.us-west-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl enable codedeploy-agent
          systemctl start codedeploy-agent

          # Install docker-compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Setup Docker with proper DNS configuration
          mkdir -p /etc/docker
          cat > /etc/docker/daemon.json << 'EOL'
          {
            "dns": ["8.8.8.8", "8.8.4.4"],
            "dns-search": ["us-west-1.compute.internal"],
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10
          }
          EOL

          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user

          # Create application directory
          mkdir -p /home/ec2-user/mysuperagent
          chown -R ec2-user:ec2-user /home/ec2-user/mysuperagent

          # Test DNS resolution before proceeding
          echo "Testing DNS resolution..."
          for i in {1..5}; do
            if dig +short google.com > /dev/null; then
              echo "DNS resolution working properly."
              break
            else
              echo "DNS resolution attempt $i failed, retrying..."
              sleep 2
            fi
          done

          # Set ENV to prod to ensure we use Together/Cerebras APIs
          cat > /home/ec2-user/mysuperagent/.env << 'EOL'
          ENV=prod
          NODE_ENV=production
          APP_ENV=production
          AWS_DEFAULT_REGION=us-west-1
          AWS_REGION=us-west-1
          EOL

          # Configure Docker network
          cat > /home/ec2-user/mysuperagent/docker-network.sh << 'EOL'
          #!/bin/bash
          docker network create --driver bridge --subnet 172.28.0.0/16 --gateway 172.28.0.1 --opt "com.docker.network.bridge.name"="docker1" mysuperagent-network
          EOL
          chmod +x /home/ec2-user/mysuperagent/docker-network.sh
          /home/ec2-user/mysuperagent/docker-network.sh

          # Login to ECR once
          aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 816069170416.dkr.ecr.us-west-1.amazonaws.com

          # Pull the images (normal pull is sufficient)
          docker pull 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents:latest

          # Create docker-compose.yml with the working config
          cat > /home/ec2-user/mysuperagent/docker-compose.yml << 'EOL'
          version: '3'
          services:
            backend:
              container_name: backend
              image: 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents:latest
              restart: always
              ports:
                - "8888:5000"
              environment:
                - ENV=prod
                - AWS_DEFAULT_REGION=us-west-1
                - AWS_REGION=us-west-1
              dns:
                - 8.8.8.8
                - 8.8.4.4
              tty: true
              stdin_open: true

          networks:
            default:
              external:
                name: mysuperagent-network
          EOL

          # Start containers
          cd /home/ec2-user/mysuperagent
          docker-compose up -d

          # Create a simple startup script to run after reboots
          cat > /home/ec2-user/mysuperagent/startup.sh << 'EOL'
          #!/bin/bash
          cd /home/ec2-user/mysuperagent
          docker-compose up -d
          EOL
          chmod +x /home/ec2-user/mysuperagent/startup.sh

          # Set up auto-restart on reboot
          echo "@reboot /home/ec2-user/mysuperagent/startup.sh" | crontab -u ec2-user -

  # Ensure EC2 instance is in public subnet with internet access
  EnsureInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: rtb-0c3c0db04389f63ae # Your public route table
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: igw-04bb901beafc9c1e1

  # Application Load Balancer (ALB)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: mysuperagentALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-0a4ab4cec37708368
        - subnet-086da4f3eb10b12d3
      Type: application

  # ALB Target Group for Backend API
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BackendTargetGroup
      Port: 8888
      Protocol: HTTP
      VpcId: vpc-0b3d3e43a3896fba1
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8888"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Targets:
        - Id: !Ref EC2Instance

  # Create ACM certificate for api.mysuperagent.io only
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.mysuperagent.io
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: api.mysuperagent.io
          HostedZoneId: Z0231843Q41D0UD9HQEI

  # HTTPS Listener for ALB
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: Certificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # HTTP Listener (Redirects to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            StatusCode: HTTP_301

  # API Listener Rule for HTTPS
  APIHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 10
      Conditions:
        - Field: host-header
          Values:
            - api.mysuperagent.io
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # Route 53 DNS for Main Domain - Now points to Vercel
  # NOTE: This should be configured in Route53 manually to point to Vercel
  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: Z0231843Q41D0UD9HQEI
  #     Name: mysuperagent.io.
  #     Type: CNAME
  #     TTL: 300
  #     ResourceRecords:
  #       - "cname.vercel-dns.com"  # Replace with actual Vercel CNAME

  # Route 53 DNS for API Subdomain
  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0231843Q41D0UD9HQEI
      Name: api.mysuperagent.io.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  InstancePublicDNS:
    Description: Public DNS of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName

  LoadBalancerDNS:
    Description: DNS of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  LoadBalancerName:
    Description: Name of the ALB for CloudWatch metrics
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerName"

  ApiURL:
    Description: API URL
    Value: https://api.mysuperagent.io
    Export:
      Name: !Sub "${AWS::StackName}-ApiURL"

  CertificateARN:
    Description: The ARN of the created certificate
    Value: !Ref Certificate

  CodeDeployApplication:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication

  DeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref DeploymentGroup

  DeploymentBucket:
    Description: S3 Bucket for deployment artifacts
    Value: !Ref DeploymentBucket

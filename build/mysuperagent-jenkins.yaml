AWSTemplateFormatVersion: "2010-09-09"
Description: "Jenkins Server for MySuperAgent with CodeDeploy Integration"

Parameters:
  VpcId:
    Type: String
    Default: vpc-0b3d3e43a3896fba1
    Description: VPC ID for Jenkins instance

  SubnetId:
    Type: String
    Default: subnet-0a4ab4cec37708368
    Description: Subnet ID for Jenkins instance

  KeyName:
    Type: String
    Default: MySuperAgentKey
    Description: Name of an existing EC2 key pair

  InstanceType:
    Type: String
    Default: t4g.small
    Description: EC2 instance type for Jenkins

  AMI:
    Type: String
    Default: ami-06114d52c0976a495
    Description: AMI ID for Jenkins instance (Amazon Linux 2)

  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-west-1:816069170416:certificate/366f913d-a93f-47d0-98f7-ec9461a81a60
    Description: ARN of wildcard certificate

Resources:
  # Security Group for Jenkins EC2
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH and Jenkins Web access"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # ALB Security Group
  JenkinsALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Jenkins ALB"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # IAM Role for Jenkins
  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: CodeDeployAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetDeployment
                  - codedeploy:GetApplication
                  - codedeploy:ListApplications
                  - codedeploy:ListDeploymentConfigs
                  - codedeploy:ListDeployments
                Resource: "*"
        - PolicyName: S3DeploymentBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:CreateBucket
                  - s3:DeleteObject
                Resource:
                  - "arn:aws:s3:::mysuperagent-staging-deploy-*"
                  - "arn:aws:s3:::mysuperagent-staging-deploy-*/*"
                  - "arn:aws:s3:::mysuperagent-deploy-*"
                  - "arn:aws:s3:::mysuperagent-deploy-*/*"
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:CreateRepository
                  - ecr:GetRepositoryPolicy
                  - ecr:ListTagsForResource
                Resource: "*"
        - PolicyName: EC2Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeImages
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeVpcs
                  - ec2:DescribeTags
                  - ec2:RunInstances
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                Resource: "*"
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListRoles
                  - iam:ListInstanceProfiles
                  - iam:ListInstanceProfilesForRole
                Resource: "*"
        - PolicyName: AWSCredentialsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - sts:GetCallerIdentity
                  - sts:GetFederationToken
                Resource: "*"
        - PolicyName: PipelineAWSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:*
                  - sqs:*
                  - cloudformation:*
                  - lambda:*
                  - elasticbeanstalk:*
                  - elasticloadbalancing:*
                  - elasticloadbalancingv2:*
                  - apigateway:*
                  - organizations:*
                Resource: "*"

  JenkinsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref JenkinsRole

  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      ImageId: !Ref AMI
      Tags:
        - Key: Name
          Value: "MySuperAgent-Jenkins"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref JenkinsSecurityGroup
          SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          # Install required packages
          yum install -y docker git aws-cli ruby wget jq bind-utils

          # Configure system DNS settings for reliability
          echo "options timeout:2 attempts:5 rotate" >> /etc/resolv.conf
          echo "nameserver 8.8.8.8" >> /etc/resolv.conf
          echo "nameserver 8.8.4.4" >> /etc/resolv.conf

          # Install docker-compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Setup Docker with proper DNS configuration
          mkdir -p /etc/docker
          cat > /etc/docker/daemon.json << 'EOL'
          {
            "dns": ["8.8.8.8", "8.8.4.4"],
            "dns-search": ["us-west-1.compute.internal"],
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10
          }
          EOL

          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user

          # Create Jenkins data directory
          mkdir -p /var/jenkins_home
          chown 1000:1000 /var/jenkins_home

          # Create necessary folders
          mkdir -p /home/ec2-user/jenkins
          chown -R ec2-user:ec2-user /home/ec2-user/jenkins

          # Install AWS CodeDeploy CLI for deployments
          yum install -y python3-pip
          pip3 install awscli

          # Install CodeDeploy agent to understand deployment structure
          cd /home/ec2-user
          wget https://aws-codedeploy-us-west-1.s3.us-west-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          # docker-compose.yml with plugins preinstalled
          cat > /home/ec2-user/jenkins/docker-compose.yml << 'EOL'
          version: '3'
          services:
            jenkins:
              image: jenkins/jenkins:lts
              container_name: jenkins
              restart: always
              user: root
              ports:
                - "8080:8080"
                - "50000:50000"
              volumes:
                - /var/jenkins_home:/var/jenkins_home
                - /var/run/docker.sock:/var/run/docker.sock
                - /usr/bin/docker:/usr/bin/docker
                - /usr/local/bin/docker-compose:/usr/bin/docker-compose
              environment:
                - JAVA_OPTS="-Djenkins.install.runSetupWizard=true"
                - TZ=America/Los_Angeles
                - AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/role
              dns:
                - 8.8.8.8
                - 8.8.4.4
          EOL

          # Start Jenkins
          cd /home/ec2-user/jenkins
          docker-compose up -d

          # Give Jenkins some time to start up
          sleep 30

          # Setup Jenkins configuration via Groovy script to install plugins
          mkdir -p /var/jenkins_home/init.groovy.d
          cat > /var/jenkins_home/init.groovy.d/install-plugins.groovy << 'EOL'
          import jenkins.model.*
          import hudson.model.*
          import jenkins.install.*

          def instance = Jenkins.getInstance()
          def pm = instance.getPluginManager()
          def uc = instance.getUpdateCenter()
          uc.updateAllSites()

          def plugins = [
              "git",
              "amazon-ecr",
              "aws-credentials",
              "pipeline-aws",
              "docker-workflow",
              "blueocean",
              "pipeline-stage-view",
              "credentials-binding",
              "timestamper",
              "workflow-aggregator",
              "aws-codedeploy",
              "ec2"
          ]

          for (plugin in plugins) {
              if (!pm.getPlugin(plugin)) {
                  try {
                      def pluginObj = uc.getPlugin(plugin)
                      if (pluginObj) {
                          def installFuture = pluginObj.deploy()
                          installFuture.get()
                      } else {
                          println "Cannot find plugin: " + plugin
                      }
                  } catch (Exception e) {
                      println "Failed to install plugin: " + plugin + ", error: " + e.getMessage()
                  }
              }
          }

          instance.save()
          EOL

          # Create AWS credentials configuration script
          cat > /var/jenkins_home/init.groovy.d/create-aws-credentials.groovy << 'EOL'
          import jenkins.model.*
          import com.cloudbees.jenkins.plugins.awscredentials.*
          import com.amazonaws.auth.*
          import hudson.security.*

          def jenkins = Jenkins.getInstance()

          try {
              // Create AWS Credentials that use the EC2 instance profile
              def credentialsStore = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
              
              def ec2Role = new InstanceProfileCredentials(
                CredentialsScope.GLOBAL,
                "aws-instance-profile",
                "AWS IAM Role Credentials",
                null)
              
              // Add the credential to the store
              credentialsStore.addCredentials(
                jenkins.getACL(),
                ec2Role)
                
              println("Successfully configured AWS credentials using instance profile")
          } catch (Exception e) {
              println "Warning: Could not create AWS credentials: " + e.getMessage()
          }

          jenkins.save()
          EOL

          # Create startup script
          cat > /home/ec2-user/jenkins/startup.sh << 'EOL'
          #!/bin/bash
          cd /home/ec2-user/jenkins
          docker-compose up -d
          EOL
          chmod +x /home/ec2-user/jenkins/startup.sh

          # Get initial admin password
          echo "Waiting for Jenkins to generate the initial admin password..."
          sleep 60
          echo "Initial Jenkins admin password:" > /home/ec2-user/jenkins_password.txt
          cat /var/jenkins_home/secrets/initialAdminPassword >> /home/ec2-user/jenkins_password.txt
          chown ec2-user:ec2-user /home/ec2-user/jenkins_password.txt

          # Set up auto-restart on reboot
          echo "@reboot /home/ec2-user/jenkins/startup.sh" | crontab -u ec2-user -

          # Create example pipeline configuration for both environments
          mkdir -p /home/ec2-user/jenkins/pipeline-examples

          # Create an example pipeline for staging
          cat > /home/ec2-user/jenkins/pipeline-examples/staging-pipeline.groovy << 'EOL'
          pipeline {
              agent any
              
              environment {
                  AWS_REGION = 'us-west-1'
                  S3_BUCKET = 'mysuperagent-staging-deploy-816069170416'
                  APPLICATION_NAME = 'MySuperAgentApp-Staging'
                  DEPLOYMENT_GROUP = 'MySuperAgentDeploymentGroup-Staging'
                  ECR_REPO_AGENTS = '816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents'
                  ECR_REPO_FRONTEND = '816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-frontend'
                  ENVIRONMENT = 'staging'
              }
              
              stages {
                  stage('Checkout') {
                      steps {
                          checkout scm
                      }
                  }
                  
                  stage('Build and Push Images') {
                      steps {
                          script {
                              // Login to ECR
                              sh '''
                                  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_AGENTS
                              '''
                              
                              // Build and push backend
                              sh '''
                                  cd backend
                                  docker build -t $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER .
                                  docker tag $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER $ECR_REPO_AGENTS:latest
                                  docker push $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER
                                  docker push $ECR_REPO_AGENTS:latest
                              '''
                              
                              // Build and push frontend
                              sh '''
                                  cd frontend
                                  docker build -t $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER .
                                  docker tag $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER $ECR_REPO_FRONTEND:latest
                                  docker push $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER
                                  docker push $ECR_REPO_FRONTEND:latest
                              '''
                          }
                      }
                  }
                  
                  stage('Prepare CodeDeploy') {
                      steps {
                          script {
                              sh '''
                                  # Create the appspec.yml file
                                  cat > appspec.yml << 'APPSPEC'
                                  version: 0.0
                                  os: linux
                                  files:
                                    - source: /
                                      destination: /home/ec2-user/mysuperagent
                                  hooks:
                                    ApplicationStart:
                                      - location: scripts/start.sh
                                        timeout: 300
                                        runas: ec2-user
                                  APPSPEC
                                  
                                  # Create deployment scripts
                                  mkdir -p scripts
                                  
                                  cat > scripts/start.sh << 'STARTSCRIPT'
                                  #!/bin/bash
                                  cd /home/ec2-user/mysuperagent
                                  
                                  # Login to ECR
                                  aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 816069170416.dkr.ecr.us-west-1.amazonaws.com
                                  
                                  # Pull the latest images
                                  docker pull 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents:latest
                                  docker pull 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-frontend:latest
                                  
                                  # Restart the containers
                                  docker-compose down
                                  docker-compose up -d
                                  STARTSCRIPT
                                  
                                  chmod +x scripts/start.sh
                                  
                                  # Archive the deployment files
                                  zip -r deployment.zip appspec.yml scripts/
                              '''
                          }
                      }
                  }
                  
                  stage('Deploy with CodeDeploy') {
                      steps {
                          script {
                              // Upload to S3
                              sh '''
                                  aws s3 cp deployment.zip s3://$S3_BUCKET/deployments/$ENVIRONMENT-$BUILD_NUMBER.zip
                              '''
                              
                              // Create deployment
                              sh '''
                                  aws deploy create-deployment \
                                      --application-name $APPLICATION_NAME \
                                      --deployment-group-name $DEPLOYMENT_GROUP \
                                      --s3-location bucket=$S3_BUCKET,key=deployments/$ENVIRONMENT-$BUILD_NUMBER.zip,bundleType=zip \
                                      --region $AWS_REGION
                              '''
                          }
                      }
                  }
              }
              
              post {
                  always {
                      cleanWs()
                  }
              }
          }
          EOL

          # Create an example pipeline for production
          cat > /home/ec2-user/jenkins/pipeline-examples/production-pipeline.groovy << 'EOL'
          pipeline {
              agent any
              
              environment {
                  AWS_REGION = 'us-west-1'
                  S3_BUCKET = 'mysuperagent-deploy-816069170416'
                  APPLICATION_NAME = 'MySuperAgentApp'
                  DEPLOYMENT_GROUP = 'MySuperAgentDeploymentGroup'
                  ECR_REPO_AGENTS = '816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents'
                  ECR_REPO_FRONTEND = '816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-frontend'
                  ENVIRONMENT = 'prod'
              }
              
              stages {
                  stage('Checkout') {
                      steps {
                          checkout scm
                      }
                  }
                  
                  stage('Build and Push Images') {
                      steps {
                          script {
                              // Login to ECR
                              sh '''
                                  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_AGENTS
                              '''
                              
                              // Build and push backend
                              sh '''
                                  cd backend
                                  docker build -t $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER .
                                  docker tag $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER $ECR_REPO_AGENTS:stable
                                  docker push $ECR_REPO_AGENTS:$ENVIRONMENT-$BUILD_NUMBER
                                  docker push $ECR_REPO_AGENTS:stable
                              '''
                              
                              // Build and push frontend
                              sh '''
                                  cd frontend
                                  docker build -t $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER .
                                  docker tag $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER $ECR_REPO_FRONTEND:stable
                                  docker push $ECR_REPO_FRONTEND:$ENVIRONMENT-$BUILD_NUMBER
                                  docker push $ECR_REPO_FRONTEND:stable
                              '''
                          }
                      }
                  }
                  
                  stage('Prepare CodeDeploy') {
                      steps {
                          script {
                              sh '''
                                  # Create the appspec.yml file
                                  cat > appspec.yml << 'APPSPEC'
                                  version: 0.0
                                  os: linux
                                  files:
                                    - source: /
                                      destination: /home/ec2-user/mysuperagent
                                  hooks:
                                    ApplicationStart:
                                      - location: scripts/start.sh
                                        timeout: 300
                                        runas: ec2-user
                                  APPSPEC
                                  
                                  # Create deployment scripts
                                  mkdir -p scripts
                                  
                                  cat > scripts/start.sh << 'STARTSCRIPT'
                                  #!/bin/bash
                                  cd /home/ec2-user/mysuperagent
                                  
                                  # Login to ECR
                                  aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 816069170416.dkr.ecr.us-west-1.amazonaws.com
                                  
                                  # Pull the stable images
                                  docker pull 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-agents:stable
                                  docker pull 816069170416.dkr.ecr.us-west-1.amazonaws.com/mysuperagent-frontend:stable
                                  
                                  # Update the docker-compose.yml file to use stable tags
                                  sed -i 's/mysuperagent-agents:latest/mysuperagent-agents:stable/g' docker-compose.yml
                                  sed -i 's/mysuperagent-frontend:latest/mysuperagent-frontend:stable/g' docker-compose.yml
                                  
                                  # Restart the containers
                                  docker-compose down
                                  docker-compose up -d
                                  STARTSCRIPT
                                  
                                  chmod +x scripts/start.sh
                                  
                                  # Archive the deployment files
                                  zip -r deployment.zip appspec.yml scripts/
                              '''
                          }
                      }
                  }
                  
                  stage('Deploy with CodeDeploy') {
                      steps {
                          script {
                              // Upload to S3
                              sh '''
                                  aws s3 cp deployment.zip s3://$S3_BUCKET/deployments/$ENVIRONMENT-$BUILD_NUMBER.zip
                              '''
                              
                              // Create deployment
                              sh '''
                                  aws deploy create-deployment \
                                      --application-name $APPLICATION_NAME \
                                      --deployment-group-name $DEPLOYMENT_GROUP \
                                      --s3-location bucket=$S3_BUCKET,key=deployments/$ENVIRONMENT-$BUILD_NUMBER.zip,bundleType=zip \
                                      --region $AWS_REGION
                              '''
                          }
                      }
                  }
              }
              
              post {
                  always {
                      cleanWs()
                  }
              }
          }
          EOL

          chown -R ec2-user:ec2-user /home/ec2-user/jenkins/pipeline-examples

  # Jenkins ALB Target Group
  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "JenkinsTargetGroup"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /login
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Targets:
        - Id: !Ref JenkinsInstance

  # Application Load Balancer for Jenkins
  JenkinsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "jenkins-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref JenkinsALBSecurityGroup
      Subnets:
        - subnet-0a4ab4cec37708368
        - subnet-086da4f3eb10b12d3
      Type: application
      Tags:
        - Key: Environment
          Value: "cicd"

  # HTTPS Listener for Jenkins ALB
  JenkinsHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref JenkinsLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsTargetGroup

  # HTTP Listener (Redirects to HTTPS)
  JenkinsHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref JenkinsLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            StatusCode: HTTP_301

  # Route 53 DNS for Jenkins
  JenkinsDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0231843Q41D0UD9HQEI
      Name: "jenkins.mysuperagent.io."
      Type: A
      AliasTarget:
        DNSName: !GetAtt JenkinsLoadBalancer.DNSName
        HostedZoneId: !GetAtt JenkinsLoadBalancer.CanonicalHostedZoneID

Outputs:
  JenkinsInstanceId:
    Description: ID of the Jenkins EC2 instance
    Value: !Ref JenkinsInstance
    Export:
      Name: !Sub "${AWS::StackName}-JenkinsInstanceId"

  JenkinsURL:
    Description: URL to access Jenkins
    Value: "https://jenkins.mysuperagent.io"
    Export:
      Name: !Sub "${AWS::StackName}-JenkinsURL"

  JenkinsPublicDNS:
    Description: Public DNS of the Jenkins instance
    Value: !GetAtt JenkinsInstance.PublicDnsName

  JenkinsLoadBalancerDNS:
    Description: DNS of the Jenkins ALB
    Value: !GetAtt JenkinsLoadBalancer.DNSName

  InitialPasswordCommand:
    Description: Command to obtain the initial Jenkins admin password
    Value: !Sub "ssh -i ${KeyName}.pem ec2-user@${JenkinsInstance.PublicDnsName} cat /home/ec2-user/jenkins_password.txt"

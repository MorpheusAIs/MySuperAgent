name: Deploy MySuperAgent

# Controls when the workflow will run
on:
  # Manual trigger with a button in the GitHub UI
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"
        type: string
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

# Environment variables
env:
  AWS_REGION: us-west-1
  ACCOUNT_ID: "816069170416"
  S3_BUCKET: mysuperagent-deploy-816069170416
  APPLICATION_NAME: MySuperAgentApp
  DEPLOYMENT_GROUP: MySuperAgentDeploymentGroup
  DEPLOYMENT_CONFIG: CodeDeployDefault.AllAtOnce

# Jobs to run
jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create temporary directory
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
          echo "VERSION=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "BUNDLE_FILE=/tmp/mysuperagent-deployment-$(date +%Y%m%d%H%M%S).zip" >> $GITHUB_ENV

      - name: Create AppSpec file
        run: |
          mkdir -p $TEMP_DIR/scripts
          cat > $TEMP_DIR/appspec.yml << EOF
          version: 0.0
          os: linux
          files:
            - source: /scripts
              destination: /tmp/deployment
          hooks:
            ApplicationStop:
              - location: scripts/stop_application.sh
                timeout: 300
                runas: root
            BeforeInstall:
              - location: scripts/before_install.sh
                timeout: 300
                runas: root
            AfterInstall:
              - location: scripts/after_install.sh
                timeout: 600
                runas: root
            ApplicationStart:
              - location: scripts/start_application.sh
                timeout: 300
                runas: root
          EOF

      - name: Copy deployment scripts
        run: |
          cp deployment/before_install.sh $TEMP_DIR/scripts/
          cp deployment/after_install.sh $TEMP_DIR/scripts/
          cp deployment/start_application.sh $TEMP_DIR/scripts/
          cp deployment/stop_application.sh $TEMP_DIR/scripts/
          chmod +x $TEMP_DIR/scripts/*.sh

      - name: Create deployment bundle
        run: |
          cd $TEMP_DIR
          zip -r $BUNDLE_FILE .
          echo "Created deployment bundle: $BUNDLE_FILE"

      - name: Upload bundle to S3
        run: |
          aws s3 cp $BUNDLE_FILE s3://$S3_BUCKET/
          echo "Uploaded bundle to S3: s3://$S3_BUCKET/$(basename $BUNDLE_FILE)"

      - name: Create deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name $APPLICATION_NAME \
              --deployment-group-name $DEPLOYMENT_GROUP \
              --deployment-config-name $DEPLOYMENT_CONFIG \
              --s3-location bucket=$S3_BUCKET,key=$(basename $BUNDLE_FILE),bundleType=zip \
              --query 'deploymentId' \
              --output text)

          echo "Deployment created with ID: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for deployment to complete
        run: |
          echo "Tracking deployment status..."

          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Created" ] || [ "$STATUS" == "Queued" ] || [ "$STATUS" == "Ready" ]; do
              echo "Deployment status: $STATUS"
              sleep 30
              STATUS=$(aws deploy get-deployment \
                  --deployment-id $DEPLOYMENT_ID \
                  --query 'deploymentInfo.status' \
                  --output text)
          done

          if [ "$STATUS" == "Succeeded" ]; then
              echo "Deployment succeeded!"
              exit 0
          else
              echo "Deployment failed with status: $STATUS"
              exit 1
          fi

      - name: Clean up
        if: always()
        run: |
          rm -rf $TEMP_DIR
          rm -f $BUNDLE_FILE
